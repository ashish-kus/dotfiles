extract ()
{
   if [ -f $@ ] ; then
     case $1 in
     *.tar.bz2) tar xjf $@   ;;
     *.tar.gz)  tar xzf $@   ;;
     *.bz2)     bunzip2 $@   ;;
     *.rar)     unrar x $@   ;;
     *.gz)      gunzip $@    ;;
     *.tar)     tar xf $@    ;;
     *.tbz2)    tar xjf $@   ;;
     *.tgz)     tar xzf $@   ;;
     *.zip)     unzip $@     ;;
     *.Z)       uncompress $@;;
     *.7z)      7z x $@      ;;
     *)           echo " cannot extract via extract "
     esac
   else
   echo " \033[44m $1 invalid file  \033[0m"
  fi
}


battery(){
  batteries=($(/usr/bin/ls -d "/sys/class/power_supply/BAT"*))
  for i in ${batteries[@]}
  do
    echo "$(basename $i): $(/usr/bin/cat $i/model_name) $(/usr/bin/cat $i/technology)"
    echo "  Status:   $(/usr/bin/cat $i/status)"
    echo "  Health:   $(( $(/usr/bin/cat $i/energy_full) * 100 / $(/usr/bin/cat $i/energy_full_design)  ))%"
    echo "  Cycle:    $(/usr/bin/cat $i/cycle_count)"
    echo "  Capacity: $(/usr/bin/cat $i/capacity)%"
  done
}

check(){
  command -v "$1" &>/dev/null
}

# update all my packages on arch
update(){
  rootmgr="sudo"
  check doas && rootmgr="doas"
  pkgmgr="$rootmgr pacman"
  check paru && pkgmgr="paru"
  check yay && pkgmgr="yay"
  $pkgmgr -Syyu
}


# Run a executable file 
run(){

  FILE=$1
  [ -f $FILE ] || echo " $1 NOT FOUND" 
  EXTENSION=`echo "$FILE" | cut -d'.' -f2`

  case "$EXTENSION" in
   sh)
      ./$FILE ;;
   lua)
      lua "./$FILE";;
   py)
      python3 $FILE ;;
  cpp)
      g++ -o compiled $FILE && ./compiled ;;
    *)
      echo "File extension unknown";;
    esac
  }

pm(){
    if [ $# -eq 0 ];then
      echo -e "Give args to perform actions."
      echo -e "-r:  To remove."
      return
    fi

    pkmgr="sudo pacman"
    hash paru 2>/dev/null && pkmgr=paru
    hash yay 2>/dev/null && pkmgr=yay

    if [[ $1 == "-r" ]];then
      $pkmgr -Rns ${@:2}
      return
    fi
   $pkmgr -S "$@"
}

open(){
  hash xdg-open 2>/dev/null || return 1
  [ $# -eq 1 ] && {
    xdg-open "$1" & disown &>/dev/null 
    return
  } &
}

clean () {
  toclean=($(yay -Qtdq)) 
  [[ ${#toclean} == 0 ]] && return
  yay -Rns $toclean
  clean
}

search (){
yay -Slq | fzf --multi --preview 'yay -Si {1}' | xargs -ro yay -S
}

lsbin() {
	plist=($(echo $PATH | tr ":" "\n"))
	for i in ${plist[@]}; do
		/usr/bin/ls -1 "$i"
	done
}

cpp()
{
	set -egit clone https://github.com/nvim-lua/kickstart.nvim.git "${XDG_CONFIG_HOME:-$HOME/.config}"/nvim
	strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
	| awk '{
	count += $NF
	if (count % 10 == 0) {
		percent = count / total_size * 100
		printf "%3d%% [", percent
		for (i=0;i<=percent;i++)
			printf "="
			printf ">"
			for (i=percent;i<100;i++)
				printf " "
				printf "]\r"
			}
		}
	END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}


# switch between various nvim configs
alias nvim-nvimDev="NVIM_APPNAME=nvimDev nvim"
alias nvim-kickstart="NVIM_APPNAME=nvimDev nvim"

function nvims() {
  items=("default" "nvimDev" "kickstart" )
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}


ftxui() {
    [ $# -eq 0 ] && echo "Usage: ftxui <filename.cpp>" && return 1
    local file="$1"
    [ ! -f "$file" ] && echo "Error: File '$file' not found." && return 1
    echo -n "  Compiling... "
    if g++ -std=c++17 "$file" -o "out" -lftxui-component -lftxui-dom -lftxui-screen; then
        sleep 0.2
        echo -ne "\r\033[K  Compilation successful!"
        sleep 0.2
        echo -ne "\r\033[K  Running...!"
        sleep 0.2
        echo -ne "\r\033[K"
        ./out
    else
        echo -e "\r\033[K  Compilation failed."
    fi
}

bindkey -s ^a "nvims\n"
